From 9ffd06794be70b91afcfc34bae3c02fe48898dd0 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Sun, 25 Feb 2024 12:58:25 +0530
Subject: [PATCH] wifi: mac80211: add support for rx drop and tx drop stats

Add support for interface level rx drop and tx drop stats.
Add support to update those stats in the ethtool callback.
Convert ethtool stats strings into enum so that driver and
mac80211 can use the enum to update the same stats field.

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 include/net/mac80211.h     | 30 ++++++++++++++++++++++++++
 net/mac80211/ethtool.c     | 43 +++++++++++++++++++++++++++++---------
 net/mac80211/ieee80211_i.h |  3 ++-
 net/mac80211/rx.c          |  4 +++-
 net/mac80211/tx.c          |  2 ++
 5 files changed, 70 insertions(+), 12 deletions(-)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 15307e9..9e6f65a 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -7833,4 +7833,34 @@ mesh_nss_offld_proxy_path_exp_update(struct ieee80211_vif *vif, u8* da,
 void ieee80211_critical_update(struct ieee80211_vif *vif, unsigned int link_id,
 				bool critical_flag, u8 bpcc);
 
+/*
+ * ieee80211_gstrings_stats - stats for ethtool interface
+ */
+enum ieee80211_gstrings_stats {
+	IEEE80211_RX_PACKETS,
+	IEEE80211_RX_BYTES,
+	IEEE80211_RX_DUPLICATES,
+	IEEE80211_RX_FRAGMENTS,
+	IEEE80211_RX_DROPPED,
+	IEEE80211_TX_PACKETS,
+	IEEE80211_TX_BYTES,
+	IEEE80211_TX_FILTERED,
+	IEEE80211_TX_RETRY_FAILED,
+	IEEE80211_TX_RETRIES,
+	IEEE80211_STA_STATE,
+	IEEE80211_TX_RATE,
+	IEEE80211_RX_RATE,
+	IEEE80211_SIGNAL,
+	IEEE80211_CHANNEL,
+	IEEE80211_NOISE,
+	IEEE80211_CH_TIME,
+	IEEE80211_CH_TIME_BUSY,
+	IEEE80211_CH_TIME_EXT_BUSY,
+	IEEE80211_CH_TIME_RX,
+	IEEE80211_CH_TIME_TX,
+	IEEE80211_TX_DEV_DROPPED,
+	IEEE80211_RX_DEV_DROPPED,
+	IEEE80211_STATS_MAX,
+};
+
 #endif /* MAC80211_H */
diff --git a/net/mac80211/ethtool.c b/net/mac80211/ethtool.c
index 0962440..bb583a3 100644
--- a/net/mac80211/ethtool.c
+++ b/net/mac80211/ethtool.c
@@ -48,14 +48,31 @@ static void ieee80211_get_ringparam(struct net_device *dev,
 }
 
 static const char ieee80211_gstrings_sta_stats[][ETH_GSTRING_LEN] = {
-	"rx_packets", "rx_bytes",
-	"rx_duplicates", "rx_fragments", "rx_dropped",
-	"tx_packets", "tx_bytes",
-	"tx_filtered", "tx_retry_failed", "tx_retries",
-	"sta_state", "txrate", "rxrate", "signal",
-	"channel", "noise", "ch_time", "ch_time_busy",
-	"ch_time_ext_busy", "ch_time_rx", "ch_time_tx"
+	[IEEE80211_RX_PACKETS] = "rx_packets",
+	[IEEE80211_RX_BYTES] = "rx_bytes",
+	[IEEE80211_RX_DUPLICATES] = "rx_duplicates",
+	[IEEE80211_RX_FRAGMENTS] = "rx_fragments",
+	[IEEE80211_RX_DROPPED] = "rx_dropped",
+	[IEEE80211_TX_PACKETS] = "tx_packets",
+	[IEEE80211_TX_BYTES] = "tx_bytes",
+	[IEEE80211_TX_FILTERED] = "tx_filtered",
+	[IEEE80211_TX_RETRY_FAILED] = "tx_retry_failed",
+	[IEEE80211_TX_RETRIES] = "tx_retries",
+	[IEEE80211_STA_STATE] = "sta_state",
+	[IEEE80211_TX_RATE] = "txrate",
+	[IEEE80211_RX_RATE] ="rxrate",
+	[IEEE80211_SIGNAL] = "signal",
+	[IEEE80211_CHANNEL] = "channel",
+	[IEEE80211_NOISE] = "noise",
+	[IEEE80211_CH_TIME] = "ch_time",
+	[IEEE80211_CH_TIME_BUSY] = "ch_time_busy",
+	[IEEE80211_CH_TIME_EXT_BUSY] = "ch_time_ext_busy",
+	[IEEE80211_CH_TIME_RX] = "ch_time_rx",
+	[IEEE80211_CH_TIME_TX] = "ch_time_tx",
+	[IEEE80211_TX_DEV_DROPPED] = "tx_dev_dropped",
+	[IEEE80211_RX_DEV_DROPPED] = "rx_dev_dropped",
 };
+
 #define STA_STATS_LEN	ARRAY_SIZE(ieee80211_gstrings_sta_stats)
 
 static int ieee80211_get_sset_count(struct net_device *dev, int sset)
@@ -84,7 +101,8 @@ static void ieee80211_get_stats(struct net_device *dev,
 	struct ieee80211_local *local = sdata->local;
 	struct station_info sinfo;
 	struct survey_info survey;
-	int i, q;
+	int q;
+	unsigned long int i;
 #define STA_STATS_SURVEY_LEN 7
 
 	memset(data, 0, sizeof(u64) * STA_STATS_LEN);
@@ -153,7 +171,7 @@ static void ieee80211_get_stats(struct net_device *dev,
 	}
 
 do_survey:
-	i = STA_STATS_LEN - STA_STATS_SURVEY_LEN;
+	i = IEEE80211_CHANNEL;
 	/* Get survey stats for current channel */
 	survey.filled = 0;
 
@@ -208,10 +226,15 @@ do_survey:
 
 	mutex_unlock(&local->sta_mtx);
 
+	data[IEEE80211_TX_DEV_DROPPED] = sdata->tx_dropped;
+	i++;
+	data[IEEE80211_RX_DEV_DROPPED] = sdata->rx_dropped;
+	i++;
+
 	if (WARN_ON(i != STA_STATS_LEN))
 		return;
 
-	drv_get_et_stats(sdata, stats, &(data[STA_STATS_LEN]));
+	drv_get_et_stats(sdata, stats, &(data[0]));
 }
 
 static void ieee80211_get_strings(struct net_device *dev, u32 sset, u8 *data)
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 1ee7752..36bb945 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1144,7 +1144,8 @@ struct ieee80211_sub_if_data {
 #ifdef CPTCFG_MAC80211_NSS_SUPPORT
 	struct nss_virt_if_handle *nssctx;
 #endif
-
+	u32 tx_dropped;
+	u32 rx_dropped;
 	/* must be last, dynamically sized area in this! */
 	struct ieee80211_vif vif;
 };
diff --git a/net/mac80211/rx.c b/net/mac80211/rx.c
index a9aa70e..6122e0c 100644
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -4311,8 +4311,10 @@ static void ieee80211_rx_handlers_result(struct ieee80211_rx_data *rx,
 		}
 	case RX_DROP_UNUSABLE:
 		I802_DEBUG_INC(rx->sdata->local->rx_handlers_drop);
-		if (rx->sta)
+		if (rx->sta) {
 			rx->link_sta->rx_stats.dropped++;
+			rx->sdata->rx_dropped++;
+		}
 		dev_kfree_skb(rx->skb);
 		break;
 	case RX_QUEUED:
diff --git a/net/mac80211/tx.c b/net/mac80211/tx.c
index 1ca4e49..ed57068 100644
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -1872,6 +1872,7 @@ static int invoke_tx_handlers_early(struct ieee80211_tx_data *tx)
 
  txh_done:
 	if (unlikely(res == TX_DROP)) {
+		tx->sdata->tx_dropped++;
 		I802_DEBUG_INC(tx->local->tx_handlers_drop);
 		if (tx->skb)
 			ieee80211_free_txskb(&tx->local->hw, tx->skb);
@@ -1916,6 +1917,7 @@ static int invoke_tx_handlers_late(struct ieee80211_tx_data *tx)
 
  txh_done:
 	if (unlikely(res == TX_DROP)) {
+		tx->sdata->tx_dropped++;
 		I802_DEBUG_INC(tx->local->tx_handlers_drop);
 		if (tx->skb)
 			ieee80211_free_txskb(&tx->local->hw, tx->skb);
-- 
2.34.1

